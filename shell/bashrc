#!/bin/bash
# cspell: disable

##  BASHRC
#
#   A component of https://github.com/robertpeteuil/dotfiles
#


###### VARS
export DOTFILES="$HOME/.dotfiles"
export BASH_RC_LOADED=1

## prompt vars
# unset prompt_style    # typical-style prompt
# prompt_style="GIT"    # 2-line prompt, displays info for repo dirs
# prompt_style="DEMO"   # prompt for screen-caps, displays string set in $DEMOHOST var
prompt_style="GIT"
DEMOHOST="Host"         # required if prompt_style="DEMO"

# If sh shell, manually source bash_profile
if [ -z "$BASH_PROFILE_LOADED" ] && [ -f "$HOME/.bash_profile" ]; then
    . "$HOME/.bash_profile"
fi

###### EXITS 
## IF NOT INTERACTIVE
case $- in
    *i*) ;;
      *) return;;
esac
## EXIT IF NOT BASH
if [ -z "$BASH_VERSION" ]; then
  export PATH
  # shellcheck disable=SC2317
  return &> /dev/null || exit
fi
## REBOOT CHECKS
if [[ "$(uname -s)" == "Linux" ]] && [[ -f /var/run/reboot-required ]]; then
  echo "*** System restart required ****"
fi


###### PATHS
pathIf "/opt/homebrew/bin"
pathIf "/opt/homebrew/sbin"
pathIf "/usr/local/bin"
pathIf "/usr/local/sbin"
pathIf "$HOME/bin"
pathIf "$HOME/go/bin"
pathIf "/usr/local/go/bin"
pathIfPre "$HOME/.local/bin"


###### BASH CONFIGURATION
# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# SET BASH SCRIPT TRACE PROMPT
export PS4='$LINENO + '

# SET FILE DEFAULT MODE
umask 0002


###### PROMPT
major_version=${BASH_VERSION%%.*}
if command -v oh-my-posh &>/dev/null && [ "$TERM_PROGRAM" != "Apple_Terminal" ] && [ "$major_version" -ge 5 ]; then
  ## OHMYPOSH - if OMP installed and modern Bash and terminal
  eval "$(oh-my-posh init bash --config $DOTFILES/themes/tokyonights-bash.omp.toml)"
else
  . $DOTFILES/shell/bash-prompt
fi


###### OS-SPECIFIC CONFIGURATION
case "$(uname -s)" in
  Darwin)
    export BASH_SILENCE_DEPRECATION_WARNING=1
    # config brew environment
    if [[ -r "/opt/homebrew/bin/brew" ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -r "/usr/local/bin/brew" ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
    if brew --prefix &> /dev/null; then
      BrewPrefix=$(/opt/homebrew/bin/brew --prefix)
      # enable brew bash completion
      sourceIf "${BrewPrefix}/etc/bash_completion"    
    fi
    # Move GPG2 to beginning of path
    if [[ $PATH == *"/usr/local/MacGPG2/bin"* ]]; then
      tpath=${PATH/\/usr\/local\/MacGPG2\/bin:\///}
      PATH="/usr/local/MacGPG2/bin:$tpath"
    fi
    export PATH
    ;;
  Linux)
    # shellcheck disable=SC2015
    if [ -x /usr/bin/dircolors ]; then
      test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi
    if ! shopt -oq posix; then
      sourceIf "/usr/share/bash-completion/bash_completion"
      sourceIf "/etc/bash_completion"
    fi
    export PATH
    ;;
esac

GRC=$(which grc 2>/dev/null)
if [ "$TERM" != dumb ] && [ -n "$GRC" ]; then
  sourceIf "$HOME/.grc/grc.bashrc"
fi

###### COMPLETIONS
## jujutsu completion
if command -v jj >/dev/null 2>&1; then
    source <(jj util completion bash)
fi
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init --cmd cd bash)"
fi

###### SOURCE FILES

## CROSS-SHELL FILES
sourceIf "$DOTFILES/shell/includes"                 # includes file    - zsh & bash

## EXTERNAL FILES
sourceIf "$DOTFILES/private/shell/bashrc-private"   # private bashrc   - bash
