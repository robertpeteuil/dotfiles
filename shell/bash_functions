#!/bin/bash
# cspell: disable

##  BASHRC FUNCTIONS
#
#   A component of https://github.com/robertpeteuil/dotfiles
#


###### FUNCTIONS
# shellcheck disable=SC2154,SC1090,SC1091
sourceIf () {
  if [ -e "$1" ]; then
    . "$1"
  fi
}
pathIf () {
  if [ -d "$1" ] && [[ $PATH != *"$1"* ]]; then
    PATH="$PATH:$1"
  fi
}
pathIfPre () {
  if [ -d "$1" ] && [[ $PATH != *"$1"* ]]; then
    PATH="$1:$PATH"
  fi
}

check-git-installed () {
  if git --version &> /dev/null; then
    GIT_INST=1
  else
    unset GIT_INST
  fi
  echo -n "$GIT_INST"
}

update-repos () {
  GIT_INST=$(check-git-installed)
  prev_dir=$(pwd)
  if [[ -e "$HOME/$DOTFILES/.git" ]] && [[ -n $GIT_INST ]]; then
    echo -e "${GREEN}Updating DOTFILES repo...${WHITE}"
    cd "$HOME/$DOTFILES" || return; git pull; cd "$prev_dir" || return
    GIT_UPDATE=True
  fi
}

#### SET VARS
OS=$(uname -s)
GIT_UPDATE=False
GIT_INST=$(check-git-installed)


#### OS SPECIFIC FUNCTIONS
if [ "$OS" == 'Darwin' ]; then
    update-all () {
        if brew --prefix &> /dev/null; then
        echo -e "${GREEN}Updating via brew...${WHITE}"
        brew update && brew upgrade
        if [[ "$1" == "clean" ]]; then
            brew cleanup 2> /dev/null
        fi
        fi
        # Don't update Mac App Store Apps over SSH as it can require UI actions
        if [[ -z "$SSH_CLIENT" ]] && [[ -z "$SSH_TTY" ]] && [[ -z "$SSH_CONNECTION" ]]; then
            if mas &> /dev/null; then
                echo -e "${GREEN}Updating Mac App Store apps...${WHITE}"
                mas upgrade
            fi
        fi
        if [[ $GIT_UPDATE ]]; then
        update-repos
        fi
        # vscode extension updates
        if which code &> /dev/null; then
            echo -e "${GREEN}Updating VSCode Extensions...${WHITE}"
            code --update-extensions
        fi
    }   
fi

if [ "$OS" == 'Linux' ]; then

    update-all() {
        if apt-get &> /dev/null; then
            pkg_cmd="apt-get"
        elif apt -h &> /dev/null; then
            pkg_cmd="apt"
        elif yum -h &> /dev/null; then
            pkg_cmd="yum"
        fi
        
        if [[ "$pkg_cmd" == apt* ]]; then
            echo -e "${GREEN}Updating via ${pkg_cmd}...${WHITE}"
            sudo "${pkg_cmd}" update -qq -y
            echo -e "${GREEN}upgrading via ${pkg_cmd}...${WHITE}"
            sudo "${pkg_cmd}" upgrade -y
            if [[ "$1" == "clean" ]]; then
                echo -e "${GREEN}Autoclean & Autoremove...${WHITE}"
                sudo apt-get autoclean -qq
                sudo apt-get autoremove -qq
            fi
        elif [[ "$pkg_cmd" == "yum" ]]; then
            echo -e "${GREEN}Updating via ${pkg_cmd}...${WHITE}"
            sudo yum makecache fast
            sudo yum update -y
            if [[ "$1" == "clean" ]]; then
                sudo yum clean packages expire-cache
            fi
        else
            echo -e "${RED}Unknown Package Manager - Packages not updated${WHITE}"
        fi

        if [[ $GIT_UPDATE ]]; then
            update-repos
        fi
        
        if which code &> /dev/null; then
            echo -e "${GREEN}Updating VSCode Extensions...${WHITE}"
            code --update-extensions
        fi
    }
fi
